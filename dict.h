#ifndef _DICTIONARY_H_
#define _DICTIONARY_H_ 1

#include<stddef.h>
#include<stdint.h>

typedef size_t hash_t, *hash_p;

typedef enum dict_status_enum
{
	ds_ok = 0,
	ds_invalidarguments,
	ds_invalidcall,
	ds_alreadyexists,
	ds_keynotfound,
	ds_nomemory
}dict_status;

//=============================================================================
// 回调函数：哈希函数
// 描述：用于计算字典key的哈希值。
//=============================================================================
typedef hash_t(*hash_func)(const void *key);

//=============================================================================
// 回调函数：比较函数
// 描述：比较两个数据是否具有相同含义，被用于比较字典的key。
// 注意：两个数据如果具有相同含义，则这个函数应当返回0。
//   正常情况下被调用时，传入的参数不会为NULL。
//=============================================================================
typedef int(*compare_func)(const void *key1, const void *key2);

//=============================================================================
// 回调函数：建立key的存储
// 描述：当字典内部需要复制key的时候，这个函数用于分配内存，并拷贝一个key
//=============================================================================
typedef void *(*alloc_copy_key)(const void *key);

//=============================================================================
// 回调函数：删除key
// 描述：当字典需要释放key的时候，调用这个函数释放内存。
//=============================================================================
typedef void(*on_delete_key)(void *key);

//=============================================================================
// 回调函数：删除值
// 描述：当字典需要删除value的时候，调用这个函数释放内存。
//=============================================================================
typedef void(*on_delete_value)(void *value);

typedef struct dict_bucket_struct dict_bucket_t, *dict_bucket_p;
struct dict_bucket_struct
{
	hash_t hash;
	void *key;
	void *value;
	dict_bucket_p next;
};

typedef struct dict_struct
{
	void *internal;
	on_delete_key on_delete_key;
	on_delete_value on_delete_value;
	size_t data_count;
	size_t hash_collision_count;
	int bucket_bit_count;
	dict_bucket_p buckets;
}dict_t, *dict_p;

//=============================================================================
// 函数：创建字典
// 描述：创建一个空的字典。
//=============================================================================
dict_p dict_create();

//=============================================================================
// 函数：设置字典的哈希函数
// 描述：成功返回hs_ok，失败返回其它值。
//=============================================================================
dict_status dict_set_hash_func(dict_p dict, hash_func hash_func);

//=============================================================================
// 函数：取得字典的哈希函数
//=============================================================================
hash_func dict_get_hash_func(dict_p dict);

//=============================================================================
// 函数：设置字典的比较函数
// 描述：成功返回hs_ok，失败返回其它值，比较函数主要用于比较key的不同，在哈希碰
//   撞时使用。
//=============================================================================
dict_status dict_set_compare_func(dict_p dict, compare_func compare_func);

//=============================================================================
// 函数：取得字典的比较函数
//=============================================================================
compare_func dict_get_compare_func(dict_p dict);

//=============================================================================
// 函数：设置字典的key分配复制函数
// 描述：成功返回hs_ok，失败返回其它值，比较函数主要用于比较key的不同，在哈希碰
//   撞时使用。
//=============================================================================
dict_status dict_set_alloc_copy_key_func
(
	dict_p dict,
	alloc_copy_key alloc_copy_key
);

//=============================================================================
// 函数：取得字典的key分配复制函数
//=============================================================================
alloc_copy_key dict_get_alloc_copy_key_func(dict_p dict);

//=============================================================================
// 函数：设置字典的移除时调用的函数
// 描述：成功返回hs_ok，失败返回其它值，在字典移除项时被调用。
// 注意：字典本身并不负责管理所有的key和value的内存。
//=============================================================================
dict_status dict_set_on_delete_key(dict_p dict, on_delete_key on_delete_key);

//=============================================================================
// 函数：取得字典的移除时调用的函数
//=============================================================================
on_delete_key dict_get_on_delete_key(dict_p dict);

//=============================================================================
// 函数：设置字典的移除时调用的函数
// 描述：成功返回hs_ok，失败返回其它值，在字典移除项时被调用。
// 注意：字典本身并不负责管理所有的key和value的内存。
//=============================================================================
dict_status dict_set_on_delete_value
(
	dict_p dict,
	on_delete_value on_delete_value
);

//=============================================================================
// 函数：取得字典的移除时调用的函数
//=============================================================================
on_delete_value dict_get_on_delete_value(dict_p dict);

//=============================================================================
// 函数：插入
// 描述：将东西插入到字典里
// 参数：
//   @dict：字典
//   @key：键，用于在字典里查找对应的数据。
//   @value：值。也就是你放入存储的内容。
// 注意：
//   @key和@value的值会被直接复制进字典，并且会在你移除时或者销毁字典时，字典的
//     on_remove_callback回调函数被调用，用于告知你释放内存。
//   请保证@key和@value指向的内存的所有权得到合理管理。
//   此外，这个操作同时会根据已插入的数据的数量扩大字典的大小。
//=============================================================================
dict_status dict_insert
(
	dict_p dict,
	const void *key,
	void *value
);

//=============================================================================
// 函数：赋值
// 描述：按照key在字典中查找，如果找到值则修改值。如果没找到则进行插入。
// 注意：修改值的过程中，会对旧值调用on_remove事件，用于清理内存，此时传入回调
//   函数的第一个参数是NULL。
//=============================================================================
dict_status dict_assign
(
	dict_p dict,
	const void *key,
	void *value
);

//=============================================================================
// 函数：改变字典大小
// 描述：会将字典中已存储的数据重新插入到新尺寸的字典。
// 参数：
//   @dict：字典
//   @new_bit_count：字典大小的位数。
// 注意：
//   字典的大小永远是2的N次方，字典越大，插入、查询操作越快，相应的占用越高。
//   但如果字典过小，字典的查询加速优势就会消失；字典越小，速度越接近于链表。
//=============================================================================
dict_status dict_resize(dict_p dict, int new_bit_count);

//=============================================================================
// 函数：查询
// 描述：从字典里查询键对应的值。查询速度很快，时间复杂度理论上是O(1)。
//   哈希算法的速度和碰撞率决定了字典的查询速度，碰撞率越小，查询越快。
// 注意：如果失败，返回NULL。
//=============================================================================
dict_bucket_p dict_search_bucket(dict_p dict, const void *key);

//=============================================================================
// 函数：查询
// 描述：从字典里查询键对应的值。查询速度很快，时间复杂度理论上是O(1)。
//   哈希算法的速度和碰撞率决定了字典的查询速度，碰撞率越小，查询越快。
// 注意：如果失败，返回NULL。
//=============================================================================
void *dict_search(dict_p dict, const void *key);

//=============================================================================
// 函数：移除
// 描述：从字典里移除对应键的值。移除时调用on_remove用于释放key和value的内存。
//=============================================================================
dict_status dict_remove(dict_p dict, const void *key);

//=============================================================================
// 函数：销毁整个字典
//=============================================================================
void dict_delete(dict_p dict);

#endif
